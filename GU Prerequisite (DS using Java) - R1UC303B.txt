1. Data Types and Type Casting
Problem Statement: Write a program that reads two integers and a floating-point number. Perform bitwise operations on the integers and arithmetic operations involving all three numbers. Use type casting where necessary to ensure correct results and avoid overflow/underflow.

Description: Ensure that you correctly cast between data types to avoid any potential overflow or underflow issues during arithmetic operations. Also, explore how different data types interact with each other.

Input Format:

Three lines, each containing one number. The first two lines contain integers, and the third line contains a floating-point number.
Output Format:

Print the result of ((int1 & int2) | (int1 ^ int2)) as an integer.
Print the result of (int1 * float_num + int2 / float_num) as a floating-point number.

Sample Input :
8
7
3.3
Sample Output :
15
28.5212




#include <stdio.h>
int main() {
    int int1, int2;
    float float_num;
    scanf("%d", &int1);
    scanf("%d", &int2);
    scanf("%f", &float_num);
    int bitwise_result = (int1 & int2) | (int1 ^ int2);
    float arithmetic_result = int1 * float_num + int2 / float_num;
    printf("%d\n", bitwise_result);
    printf("%.4f\n", arithmetic_result);

    return 0;
}




2. Operators and Associativity
Problem Statement: Write a program that reads an integer n, followed by n integers, and then applies a complex expression involving multiple operators and parentheses. The expression should be evaluated in a specific order demonstrating operator precedence and associativity.

Description: Define an expression like (((x1 + x2) - x3) * x4 / x5) % x6 and ensure the operators are applied correctly according to their precedence and associativity rules. The program should read the values and compute the result.

Input Format:

The first line contains an integer n, the number of elements.
The next n lines contain one integer each.
Output Format:

Print the result of the complex expression.
Sample Input:
6
5
10
3
8
2
7
Sample Output:
6



#include <stdio.h>
int main() {
    int n;
    scanf("%d", &n);
    if (n < 6) {
        printf("Error: Not enough inputs.\n");
        return 1;  // Exit with error code
    }
    int x[6];
    for (int i = 0; i < 6; i++) {
        scanf("%d", &x[i]);
    }
    int result = (((x[0] + x[1]) - x[2]) * x[3] / x[4]) % x[5];
    printf("%d\n", result);

    return 0;
}




3.
4.

5. Unconventional Use of Goto Statement
Problem Statement:
Create a C program that calculates the factorial of a number using the goto statement. The twist is to implement error handling for negative inputs using the goto statement to jump to an error handling section.

Description:

The program should prompt the user to enter a number.
If the number is negative, use goto to jump to an error message.
If the number is positive, calculate the factorial using a loop and goto.
Input Format:

The user inputs a single integer.
Output Format:

The output is either the factorial of the number or an error message for negative inputs.

Sample Input:
5
Sample Output:
Factorial of 5 is 120



#include <stdio.h>

int main() {
    int num;
    unsigned long long factorial = 1;
    scanf("%d", &num);
    if (num < 0) {
        goto error;
    }
    int i = 1;
    loop:
    if (i <= num) {
        factorial *= i;
        i++;
        goto loop;
    }
    printf("Factorial of %d is %llu\n", num, factorial);
    return 0;
    error:
    printf("Error: Factorial is not defined for negative numbers.\n");
    return 1;
}




6. Properties of Arrays in C
Problem Statement:
Write a C program to demonstrate the effect of modifying array elements within a function using both direct indexing and pointer arithmetic. The twist is to use the same function to modify the array elements in both ways and show the difference.

Description:

The program should define an array and pass it to a function.
The function should modify the array elements using direct indexing for the first half and pointer arithmetic for the second half.
Display the array before and after modification.
Input Format:

The user inputs the number of elements followed by the elements themselves.
Output Format:

The array before and after modification.

Sample Input:
5
7 14 21 28 35
Sample Output:
Original array: 7 14 21 28 35
Modified array: 14 28 42 56 70



#include <stdio.h>
void modifyArray(int *arr, int n) {
    for (int i = 0; i < n / 2; i++) {
        arr[i] *= 2;
    }
    for (int i = n / 2; i < n; i++) {
        *(arr + i) *= 2;
    }
}
int main() {
    int n;
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    printf("Original array: ");
    for (int i = 0; i < n; i++) {
        printf("%d", arr[i]);
        if (i < n - 1) {
            printf(" ");
        }
    }
    printf("\n");
    //717580
    modifyArray(arr, n);
    printf("Modified array: ");
    for (int i = 0; i < n; i++) {
        printf("%d", arr[i]);
        if (i < n - 1) {
            printf(" ");
        }
    }
    printf("\n");
    return 0;
}




7. C Structures
Problem Statement:
Write a C program that reads student records from the user and stores them in a structure. The program should also calculate and print the average marks of the students using a pointer to the structure.

Description:
This question tests the ability to use structures to store data and manipulate it using pointers. It requires reading multiple student records, storing them in an array of structures, and using a pointer to calculate the average marks.

Input Format:
First line: an integer n (number of students)
Next n lines: each containing a student's name and marks (space-separated)
Output Format:
First line: average marks of the students

Sample Input:
2
David 60
Eva 75
Sample Output:
Average Marks: 67.50



#include <stdio.h>
#include <stdlib.h>
#define MAX_NAME_LENGTH 100
typedef struct {
    char name[MAX_NAME_LENGTH];
    int marks;
} Student;
float calculateAverageMarks(Student *students, int n) {
    int totalMarks = 0;
    for (int i = 0; i < n; i++) {
        totalMarks += students[i].marks;
    }
    return (float)totalMarks / n;
}
int main() {
    int n;
    scanf("%d", &n);
    if (n <= 0) {
        return 1; 
    }
    Student *students = (Student *)malloc(n * sizeof(Student));
    if (students == NULL) {
        return 1; 
    }
    for (int i = 0; i < n; i++) {
        scanf("%s %d", students[i].name, &students[i].marks);
    }
    float averageMarks = calculateAverageMarks(students, n);
    printf("Average Marks: %.2f\n", averageMarks);
    free(students);
    return 0;
}




8. Enumeration (enum) in C
Problem Statement:
Create a C program that uses an enumeration to represent the days of the week. The program should take a list of integers from the user, convert them to the corresponding days of the week using the enum, and then print the days in reverse order.

Description:
You will define an enumeration for the days of the week starting with Sunday as 0 and ending with Saturday as 6. The program should read a list of integers from the user, map them to the corresponding days, and print the days in reverse order.

Input Format:

An integer
𝑛
n representing the number of days.
A list of
𝑛
n integers representing the days of the week.
Output Format:

The days of the week in reverse order.

Sample Input:
5
0 1 2 3 4
Sample Output:
Days in reverse order:
Thursday Wednesday Tuesday Monday Sunday



#include <stdio.h>
typedef enum {
    SUNDAY,
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY
} DayOfWeek;
const char* getDayOfWeekString(DayOfWeek day) {
    switch(day) {
        case SUNDAY:    return "Sunday";
        case MONDAY:    return "Monday";
        case TUESDAY:   return "Tuesday";
        case WEDNESDAY: return "Wednesday";
        case THURSDAY:  return "Thursday";
        case FRIDAY:    return "Friday";
        case SATURDAY:  return "Saturday";
        default:        return "Invalid";
    }
}
int main() {
    int n;
    scanf("%d", &n);
    if (n <= 0) {
        printf("No days to process\n");
        return 1;
    }
    int days[n]; 
    for (int i = 0; i < n; i++) {
        scanf("%d", &days[i]);
    }
    printf("Days in reverse order:\n");
    for (int i = n - 1; i >= 0; i--) {
        if (days[i] >= 0 && days[i] <= 6) {
            printf("%s", getDayOfWeekString(days[i]));
        } else {
            printf("Invalid");
        }
        if (i > 0) {
            printf(" ");
        }
    }
    printf("\n");
    return 0;
}




9. C typedef
Problem Statement:
Develop a C program that uses typedef to create an alias for a structure representing a complex number. The program should perform addition and subtraction of two complex numbers provided by the user.

Description:
Define a structure for a complex number with real and imaginary parts. Use typedef to create an alias for this structure. The program should read two complex numbers from the user, perform addition and subtraction, and display the results.

Input Format:

Four floating-point numbers representing the real and imaginary parts of two complex numbers.
Output Format:

The result of the addition and subtraction of the two complex numbers.

Sample Input:
1.0 2.0 3.0 4.0
Sample Output:
Addition: 4.0 + 6.0i
Subtraction: -2.0 - 2.0i



#include <stdio.h>
typedef struct {
 float real;
 float imag;
} Complex;
Complex addComplex(Complex c1, Complex c2) {
 Complex result;
 result.real = c1.real + c2.real;
 result.imag = c1.imag + c2.imag;
 return result;
}
Complex subtractComplex(Complex c1, Complex c2) {
 Complex result;
 result.real = c1.real - c2.real;
 result.imag = c1.imag - c2.imag;
 return result;
}
void printComplex(Complex c, char sign) {
 printf("%.1f %c %.1fi", c.real, sign, c.imag);
}
int main() {
 Complex c1, c2, sum, difference;
 scanf("%f %f %f %f", &c1.real, &c1.imag, &c2.real, &c2.imag);
 sum = addComplex(c1, c2);
 difference = subtractComplex(c1, c2);
 printf("Addition: ");
 printComplex(sum, '+');
 printf("\nSubtraction: ");
 printComplex(difference, '-');
 return 0;
}




10. Dot (.) Operator in C
Problem Statement:
Write a C program that manages a list of students using structures and the dot (.) operator. The program should allow the user to input the details of multiple students, display these details, and find the student with the highest GPA.

Description:
Define a structure Student that contains the following fields:

name (a string)
age (an integer)
gpa (a float)
The program should:

Read the number of students from the user.
Read the details of each student (name, age, and GPA).
Display the details of all students.
Find and display the details of the student with the highest GPA.
Input Format:

An integer
𝑛
n representing the number of students.
For each student, a string (name), an integer (age), and a float (GPA).
Output Format:

The details of all students.
The details of the student with the highest GPA.

Sample Input:
3
Alice 20 3.5
Bob 22 3.9
Charlie 19 3.7
Sample Output:
All Students:
Name: Alice, Age: 20, GPA: 3.5
Name: Bob, Age: 22, GPA: 3.9
Name: Charlie, Age: 19, GPA: 3.7

Student with the highest GPA:
Name: Bob, Age: 22, GPA: 3.9



#include <stdio.h>
#include <string.h>
#define MAX_NAME_LENGTH 100
typedef struct {
    char name[MAX_NAME_LENGTH];
    int age;
    float gpa;
} Student;
Student findHighestGPA(Student students[], int n) {
    Student topStudent = students[0];
    for (int i = 1; i < n; i++) {
        if (students[i].gpa > topStudent.gpa) {
            topStudent = students[i];
        }
    }
    return topStudent;
}
int main() {
    int n;
    scanf("%d", &n);

    Student students[n]; 
    for (int i = 0; i < n; i++) {
        scanf("%s %d %f", students[i].name, &students[i].age, &students[i].gpa);
    }
    printf("All Students:\n");
    for (int i = 0; i < n; i++) {
        printf("Name: %s, Age: %d, GPA: %.1f\n", students[i].name, students[i].age, students[i].gpa);
    }
    Student topStudent = findHighestGPA(students, n);
    printf("\nStudent with the highest GPA:\n");
    printf("Name: %s, Age: %d, GPA: %.1f\n", topStudent.name, topStudent.age, topStudent.gpa);
    return 0;
}




